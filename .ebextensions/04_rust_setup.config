files:
  "/tmp/install_rust.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Install Rust and Cargo
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      # Add Rust to current shell PATH
      source $HOME/.cargo/env
      # Verify installation
      rustc --version
      cargo --version

packages:
  yum:
    gcc: []
    gcc-c++: []
    make: []
    openssl-devel: []

commands:
  # Run early in the deployment process (before application deployment)
  01_install_rust_for_root:
    command: |
      if ! command -v rustc &> /dev/null; then
        echo "Installing Rust for root user..."
        /tmp/install_rust.sh
        # Make Rust available system-wide
        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> /root/.bashrc
        echo 'export PATH="/root/.cargo/bin:$PATH"' >> /etc/environment
        echo 'export PATH="/root/.cargo/bin:$PATH"' >> /etc/profile.d/rust.sh
        chmod +x /etc/profile.d/rust.sh
        # Make it available immediately
        export PATH="/root/.cargo/bin:$PATH"
      fi
    ignoreErrors: false
  
  02_verify_rust_installation:
    command: |
      source /etc/profile
      rustc --version || echo "rustc not in PATH for this shell"
      cargo --version || echo "cargo not in PATH for this shell"
      echo "Using direct path as fallback:"
      /root/.cargo/bin/rustc --version
      /root/.cargo/bin/cargo --version
    ignoreErrors: true

container_commands:
  # These run after the application is deployed but before it's started
  01_configure_rust_for_application:
    command: |
      # Add Rust to PATH for the application environment
      echo 'export PATH="/root/.cargo/bin:$PATH"' >> /opt/elasticbeanstalk/deployment/.env
      echo 'export PATH="/root/.cargo/bin:$PATH"' >> /opt/python/current/env
      
      # Ensure .cargo/bin exists in the systemd path for services
      mkdir -p /etc/systemd/system.conf.d/
      echo 'DefaultEnvironment="PATH=/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"' > /etc/systemd/system.conf.d/path.conf
      
      # Create symlinks to make Rust available in standard PATH locations
      ln -sf /root/.cargo/bin/rustc /usr/local/bin/rustc
      ln -sf /root/.cargo/bin/cargo /usr/local/bin/cargo
      
      # Verify availability
      which rustc
      which cargo
    ignoreErrors: false

  02_update_pip_config:
    command: |
      # Ensure pip has access to Rust
      mkdir -p /root/.pip
      echo "[global]" > /root/.pip/pip.conf
      echo "build.env.PATH=/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin" >> /root/.pip/pip.conf
      # Also for the application user
      if [ -d /opt/python/run/venv ]; then
        source /opt/python/run/venv/bin/activate
        pip config set global.build.env.PATH "/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin"
      fi
    ignoreErrors: false
    
  03_final_verification:
    command: |
      echo "Final PATH verification:"
      echo $PATH
      which rustc || echo "rustc not in PATH"
      which cargo || echo "cargo not in PATH"
      rustc --version || echo "Using direct path instead:"
      /root/.cargo/bin/rustc --version
      /root/.cargo/bin/cargo --version
    ignoreErrors: true